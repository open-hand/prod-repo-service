spring:
  application:
    name: prod-repo-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hrds_prod_repo?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username:  ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:root}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: localhost
    port: 6379
    database: 1
    jedis:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  resources:
    # 资源缓存时间，单位秒
    cache.period: 3600
    # 开启gzip压缩
    chain.gzipped: true
    # 启用缓存
    chain.cache: true

server:
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
    # 默认值为8，建议设置每个CPU核心一个线程
    io-threads: ${SERVER_UNDERTOW_IO_THREADS:4}
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
    # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
    worker-threads: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    allow-unescaped-characters-in-url: true

feign:
  hystrix:
    enabled: true

hystrix:
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量
      # 默认10
      coreSize: 1000
      # 最大执行线程数
      maximumSize: 1000
  command:
    default:
      execution:
        isolation:
          thread:
            # HystrixCommand 执行的超时时间，超时后进入降级处理逻辑。一个接口，理论的最佳响应速度应该在200ms以内，或者慢点的接口就几百毫秒。
            # 默认 1000 毫秒，最高设置 2000足矣。如果超时，首先看能不能优化接口相关业务、SQL查询等，不要盲目加大超时时间，否则会导致线程堆积过多，hystrix 线程池卡死，最终服务不可用。
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:40000}

ribbon:
  # 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 客户端连接超时时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:3000}
  # 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000
      data-center-id: 1
      worker-id: 1


logging:
  level:
    org.apache.ibatis: ${LOG_LEVEL:debug}
    io.choerodon: ${LOG_LEVEL:debug}
    org.hzero: ${LOG_LEVEL:debug}
    org.hrds.rdupm: ${LOG_LEVEL:debug}

hzero:
  scheduler:
    autoRegister: false
  lock:
    #模式
    pattern: ${HZERO_LOCK_PATTERN:single}
    sentinel-server:
      #哨兵模式
      master-name: ${SPRING_REDIS_SENTINEL_MASTER:mymaster}
      sentinel-addresses: ${SPRING_REDIS_SENTINEL_NODES:127.0.0.1:6389,127.0.0.1:6399}
      #单节点模式
      password: ${SPRING_REDIS_PASSWORD:}
    single-server:
      address: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  file:
    rootPath: /tmp/data/fragement #分片临时文件的存储路径(绝对路径)

choerodon:
  category:
    enabled: true # 是否开启项目/组织类型控制
  devops:
    message: true
  eureka:
    event:
      max-cache-size: 300
      retry-time: 5
      retry-interval: 3
      skip-services: config**, **register-server, **gateway**, zipkin**, hystrix**, oauth**
  saga:
    service: choerodon-asgard
    consumer:
      core-thread-num: 20
      max-thread-num: 20 # 消费线程数
      poll-interval: 3 # 拉取消息的间隔(秒)，默认1秒
      enabled: true # 是否启用消费端
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      core-thread-num: 20
      max-thread-num: 20 # 消费线程数
      poll-interval-ms: 3000 # 拉取间隔，默认1000毫秒
  cleanPermission: false

harbor:
  baseUrl: ${HARBOR_BASE_URL:https://localhost}
  username: ${HARBOR_USER_NAME:admin}
  password: ${HARBOR_PASSWORD:admin}
  apiVersion: ${HARBOR_API_VERSION:v1}
  skipSSL: ${HARBOR_SKIP_SSL:false}

nexus:
  default:
    #系统默认nexus服务地址
    serverUrl: ${NEXUS_DEFAULT_BASE_URL:https://localhost}
    #系统默认nexus服务，超级管理员用户
    username: ${NEXUS_DEFAULT_USER_NAME:admin}
    #系统默认nexus服务，超级管理员用户密码
    password: ${NEXUS_DEFAULT_PASSWORD:admin}
    #系统默认nexus服务，是否启用仓库级的匿名访问控制。 1:启用  0:不启用。
    enableAnonymousFlag: ${NEXUS_DEFAULT_ENABLE_ANONYMOUS_FLAG:1}
    #系统默认nexus服务，启用仓库级的匿名访问控制时需要配置该值(即enableAnonymousFlag==1时)。 nexus服务开启全局匿名访问时，配置的用户
    anonymousUser: ${NEXUS_DEFAULT_ANONYMOUS_USER:test}
    #系统默认nexus服务，启用仓库级的匿名访问控制时需要配置该值(即enableAnonymousFlag==1时)。 nexus服务开启全局匿名访问时，配置的用户对应的角色
    anonymousRole: ${NEXUS_DEFAULT_ANONYMOUS_ROLE:test}
  #代理的配置
  proxy:
    # 过滤器拦截的uri前缀
    uriPrefix: ${NEXUS_PROXY_URIPREFIX:/v1/nexus/proxy}
    #nexus的地址
    base: ${NEXUS_DEFAULT_BASE_URL:https://localhost}
    # 过滤器拦截的servlet 地址
    servletUri: ${NEXUS_PROXY_SERVLETURI:/v1/nexus/proxy/*}
    #api地址
    servicesGatewayUrl: ${SERVICES_GATEWAY_URL:http://api.example.com}
    # 网关路由
    serviceRoute: ${SERVICE_ROUTE:/rdupm}
  filter:
    mavenRepo: ${MARKET_MAVEN:market-repo}
DesEncrypt:
  # 制品库密码， 加解密密钥
  desKey: ${DES_ENCRYPT_DES_KEY:W1CLYB54T44PAL8NCGV4999OVSDCAEIPY76W32INQNXTH86ZEF1R1HTTWBLMQ5LQ5D9FLTUDNBLUQM9YF94NJTIJNOVIUFS13FRXUZD6D52JIPMUNI0AE9QN1Q2G1HHN}
  # 长度：8位
  desIV: ${DES_ENCRYPT_DES_IV:7HHT5EVO}
